/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.3
// source: country.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as country_pb from './country_pb'; // proto import: "country.proto"


export class CountryClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorAddCountry = new grpcWeb.MethodDescriptor(
    '/Country/AddCountry',
    grpcWeb.MethodType.UNARY,
    country_pb.AddCountryRequest,
    country_pb.AddCountryResponse,
    (request: country_pb.AddCountryRequest) => {
      return request.serializeBinary();
    },
    country_pb.AddCountryResponse.deserializeBinary
  );

  addCountry(
    request: country_pb.AddCountryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<country_pb.AddCountryResponse>;

  addCountry(
    request: country_pb.AddCountryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: country_pb.AddCountryResponse) => void): grpcWeb.ClientReadableStream<country_pb.AddCountryResponse>;

  addCountry(
    request: country_pb.AddCountryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: country_pb.AddCountryResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Country/AddCountry',
        request,
        metadata || {},
        this.methodDescriptorAddCountry,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Country/AddCountry',
    request,
    metadata || {},
    this.methodDescriptorAddCountry);
  }

  methodDescriptorGetCountries = new grpcWeb.MethodDescriptor(
    '/Country/GetCountries',
    grpcWeb.MethodType.UNARY,
    country_pb.GetCountriesRequest,
    country_pb.GetCountriesResponse,
    (request: country_pb.GetCountriesRequest) => {
      return request.serializeBinary();
    },
    country_pb.GetCountriesResponse.deserializeBinary
  );

  getCountries(
    request: country_pb.GetCountriesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<country_pb.GetCountriesResponse>;

  getCountries(
    request: country_pb.GetCountriesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: country_pb.GetCountriesResponse) => void): grpcWeb.ClientReadableStream<country_pb.GetCountriesResponse>;

  getCountries(
    request: country_pb.GetCountriesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: country_pb.GetCountriesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Country/GetCountries',
        request,
        metadata || {},
        this.methodDescriptorGetCountries,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Country/GetCountries',
    request,
    metadata || {},
    this.methodDescriptorGetCountries);
  }

  methodDescriptorGetCountry = new grpcWeb.MethodDescriptor(
    '/Country/GetCountry',
    grpcWeb.MethodType.UNARY,
    country_pb.GetCountryRequest,
    country_pb.GetCountryResponse,
    (request: country_pb.GetCountryRequest) => {
      return request.serializeBinary();
    },
    country_pb.GetCountryResponse.deserializeBinary
  );

  getCountry(
    request: country_pb.GetCountryRequest,
    metadata?: grpcWeb.Metadata | null): Promise<country_pb.GetCountryResponse>;

  getCountry(
    request: country_pb.GetCountryRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: country_pb.GetCountryResponse) => void): grpcWeb.ClientReadableStream<country_pb.GetCountryResponse>;

  getCountry(
    request: country_pb.GetCountryRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: country_pb.GetCountryResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/Country/GetCountry',
        request,
        metadata || {},
        this.methodDescriptorGetCountry,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/Country/GetCountry',
    request,
    metadata || {},
    this.methodDescriptorGetCountry);
  }

}

